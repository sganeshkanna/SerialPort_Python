# -*- coding: utf-8 -*-
import serial
import time
from flask import Flask, jsonify, request
from flask_cors import CORS

# Define the byte arrays for each command.
# These commands must match the keys in the command_map dictionary.
command_map = {
    "ACK": [0x24, 0x80, 0x00, 0x03, 0x01, 0x01, 0x41, 0x43, 0x4B, 0x81, 0x23],
    "VERSION": [0x24, 0x80, 0x00, 0x07, 0x01, 0x02, 0x31, 0x2E, 0x30, 0x7C, 0x31, 0x2E, 0x30, 0x81, 0x23],
    "INITIALIZATION STRING": [0x24, 0x80, 0x00, 0x14, 0x01, 0x03, 0x49, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x81, 0x23],
    "READY": [0x24, 0x80, 0x00, 0x05, 0x01, 0x04, 0x52, 0x45, 0x41, 0x44, 0x59, 0x81, 0x23],
    "SETTING ACK": [0x24, 0x80, 0x00, 0x03, 0x02, 0x01, 0x41, 0x43, 0x4B, 0x81, 0x23],
    "MACHINE READY ACK": [0x24, 0x80, 0x00, 0x03, 0x01, 0x04, 0x41, 0x43, 0x4B, 0x81, 0x23],
    "REQ": [0x24, 0x80, 0x00, 0x03, 0x01, 0x03, 0x52, 0x45, 0x51, 0x81, 0x23],
    "RECEIPT ACK": [0x24, 0x80, 0x00, 0x03, 0x05, 0x01, 0x41, 0x43, 0x4B, 0x81, 0x23],
    "CURRENT MM": [0x24, 0x80, 0x00, 0x02, 0x05, 0x03, 0x31, 0x31, 0x81, 0x23],
    "CURRENT PASSAGE": [0x24, 0x80, 0x00, 0x01, 0x05, 0x04, 0x31, 0x81, 0x23],
    "PROCESS COMPLETE": [0x24, 0x80, 0x00, 0x08, 0x05, 0x05, 0x43, 0x4F, 0x4D, 0x50, 0x4C, 0x45, 0x54, 0x45, 0x81, 0x23],
    "CANCEL ACK": [0x24, 0x80, 0x00, 0x03, 0x05, 0x06, 0x41, 0x43, 0x4B, 0x81, 0x23],
    "RESET ACK": [0x24, 0x80, 0x00, 0x03, 0x05, 0x07, 0x41, 0x43, 0x4B, 0x81, 0x23],
    "RESET COMPLETE": [0x24, 0x80, 0x00, 0x08, 0x05, 0x08, 0x43, 0x4F, 0x4D, 0x50, 0x4C, 0x45, 0x54, 0x45, 0x81, 0x23],
    "EXPONENTIAL ACK": [0x24, 0x80, 0x00, 0x03, 0x02, 0x02, 0x41, 0x43, 0x4B, 0x81, 0x23],
    "EXPONENTIAL DATA": [0x24, 0x80, 0x00, 0x81, 0x02, 0x03, 0x31, 0x3A, 0x34, 0x30, 0x2E, 0x30, 0x30, 0x7C, 0x32, 0x3A, 0x33, 0x34, 0x2E, 0x32, 0x38, 0x7C, 0x33, 0x3A, 0x32, 0x39, 0x2E, 0x33, 0x39, 0x7C, 0x34, 0x3A, 0x32, 0x35, 0x2E, 0x31, 0x39, 0x7C, 0x35, 0x3A, 0x32, 0x31, 0x2E, 0x36, 0x30, 0x7C, 0x36, 0x3A, 0x31, 0x38, 0x2E, 0x35, 0x31, 0x7C, 0x37, 0x3A, 0x31, 0x35, 0x2E, 0x38, 0x37, 0x7C, 0x38, 0x3A, 0x31, 0x33, 0x2E, 0x36, 0x30, 0x7C, 0x39, 0x3A, 0x31, 0x31, 0x2E, 0x36, 0x36, 0x7C, 0x31, 0x30, 0x3A, 0x31, 0x30, 0x2E, 0x30, 0x30, 0x7C, 0x81, 0x23],
    "EXIT ACK": [0x24, 0x80, 0x00, 0x03, 0x10, 0x03, 0x41, 0x43, 0x4B, 0x81, 0x23],
    "START ACK": [0x24, 0x80, 0x00, 0x03, 0x03, 0x13, 0x41, 0x43, 0x4B, 0x81, 0x23],
    "HOME BREW OFF": [0x24, 0x80, 0x00, 0x07, 0x10, 0x02, 0x37, 0x32, 0x30, 0x7C, 0x4F, 0x46, 0x46, 0x81, 0x23],
    "INPUT TEST": [0x24, 0x80, 0x00, 0x13, 0x02, 0x06, 0x39, 0x3A, 0x31, 0x7C, 0x31, 0x30, 0x3A, 0x31, 0x7C, 0x31, 0x31, 0x3A, 0x31, 0x81, 0x23],
    "CALIBRATION DONE": [0x24, 0x80, 0x00, 0x04, 0x04, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x81, 0x23],
    "HEAT ON": [0x24, 0x80, 0x00, 0x01, 0x02, 0x04, 0x31, 0x81, 0x23],
    "HEAT OFF": [0x24, 0x80, 0x00, 0x01, 0x02, 0x05, 0x31, 0x81, 0x23],
    "STEAM ON": [0x24, 0x80, 0x00, 0x01, 0x02, 0x06, 0x31, 0x81, 0x23],
    "STEAM OFF": [0x24, 0x80, 0x00, 0x01, 0x02, 0x07, 0x31, 0x81, 0x23],
    "ERROR DATA": [0x24, 0x80, 0x00, 0x05, 0x04, 0x01, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x81, 0x23],
    "WARNING DATA": [0x24, 0x80, 0x00, 0x05, 0x06, 0x01, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x81, 0x23],
    "REMOVE WARNING DATA": [0x24, 0x80, 0x00, 0x05, 0x06, 0x02, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x81, 0x23],
    "SEND LAUNCH DATA":  [0x24, 0x80, 0x00, 0x06, 0x01, 0x06, 0x4C, 0x41, 0x55, 0x4E, 0x43, 0x48, 0x81, 0x23],
}

# --- Configuration ---
SERIAL_PORT = "COM10"  # CHANGE THIS to your serial port
BAUD_RATE = 115200
TIMEOUT = 2
PORT_CONNECTED = False
serial_port = None

# --- Flask Server Setup ---
app = Flask(__name__)
# Enable CORS to allow requests from the HTML file.
CORS(app)

def connect_serial_port():
    """Tries to connect to the serial port."""
    global serial_port, PORT_CONNECTED
    if PORT_CONNECTED and serial_port:
        return True
    try:
        serial_port = serial.Serial(
            port=SERIAL_PORT,
            baudrate=BAUD_RATE,
            bytesize=8,
            timeout=TIMEOUT,
            stopbits=serial.STOPBITS_ONE
        )
        PORT_CONNECTED = True
        print(f"Successfully connected to {SERIAL_PORT}")
        return True
    except Exception as e:
        print(f"Error connecting to serial port {SERIAL_PORT}: {e}")
        PORT_CONNECTED = False
        return False

@app.route('/send_command/<command_name>', methods=['GET', 'POST'])
def send_command(command_name):
    """
    API endpoint to send a specific command to the serial port.
    The command name is passed in the URL.
    """
    if not connect_serial_port():
        return jsonify({"success": False, "error": f"Could not connect to serial port {SERIAL_PORT}"}), 500

    # Convert the command name to uppercase to match the dictionary keys
    # and handle case-insensitivity from the front-end.
    command_name_upper = command_name.upper().replace("_", " ")

    if command_name_upper not in command_map:
        return jsonify({"success": False, "error": "Command not found"}), 404

    try:
        command_bytes = serial.to_bytes(command_map[command_name_upper])
        serial_port.write(command_bytes)
        print(f"Sent command: {command_name_upper} ({command_bytes.hex()})")
        return jsonify({"success": True, "message": f"Successfully sent '{command_name_upper}' command."}), 200
    except Exception as e:
        print(f"An error occurred while sending command: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/status')
def status():
    """
    Returns the current status of the serial port connection.
    """
    if not PORT_CONNECTED:
        connect_serial_port()
    status_msg = "Connected" if PORT_CONNECTED else "Disconnected"
    return jsonify({"status": status_msg})

if __name__ == '__main__':
    # Try to connect to the serial port on startup
    connect_serial_port()
    # Run the Flask app on a local host and port
    # The 'use_reloader=False' flag prevents the PermissionError on restart.
    app.run(host='127.0.0.1', port=5000, debug=True, use_reloader=False)
