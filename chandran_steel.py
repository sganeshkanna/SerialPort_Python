import serial
import time



ack = [0x24, 0x80, 0x00, 0x03, 0x01, 0x01, 0x41, 0x43, 0x4B, 0x81, 0x23]
version = [0x24, 0x80, 0x00, 0x07, 0x01, 0x02, 0x31, 0x2E, 0x30, 0x7C, 0x31, 0x2E, 0x30, 0x81, 0x23]
initialization_String = [0x24, 0x80, 0x00, 0x14, 0x01, 0x03, 0x49, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x81, 0x23]
ready = [0x24, 0x80, 0x00, 0x05, 0x01, 0x04, 0x52, 0x45, 0x41, 0x44, 0x59, 0x81, 0x23]
setting_ack = [0x24, 0x80, 0x00, 0x03, 0x02, 0x01, 0x41, 0x43, 0x4B, 0x81, 0x23]
machineready_ack = [0x24, 0x80, 0x00, 0x03, 0x01, 0x04, 0x41, 0x43, 0x4B, 0x81, 0x23]
req = [0x24, 0x80, 0x00, 0x03, 0x01, 0x03, 0x52, 0x45, 0x51, 0x81, 0x23]
receipt_ack = [0x24, 0x80, 0x00, 0x03, 0x05, 0x01, 0x41, 0x43, 0x4B, 0x81, 0x23]
current_mm = [0x24, 0x80, 0x00, 0x02, 0x05, 0x03, 0x31, 0x31, 0x81, 0x23]
current_passage = [0x24, 0x80, 0x00, 0x01, 0x05, 0x04, 0x31, 0x81, 0x23]
process_complete = [0x24, 0x80, 0x00, 0x08, 0x05, 0x05, 0x43, 0x4F, 0x4D, 0x50, 0x4C, 0x45, 0x54, 0x45, 0x81, 0x23]
cancel_ack = [0x24, 0x80, 0x00, 0x03, 0x05, 0x06, 0x41, 0x43, 0x4B, 0x81, 0x23]
reset_ack = [0x24, 0x80, 0x00, 0x03, 0x05, 0x07, 0x41, 0x43, 0x4B, 0x81, 0x23]

reset_complete = [0x24, 0x80, 0x00, 0x08, 0x05, 0x08, 0x43, 0x4F, 0x4D, 0x50, 0x4C, 0x45, 0x54, 0x45, 0x81, 0x23]
exponentaial_ack = [0x24, 0x80, 0x00, 0x03, 0x02, 0x02, 0x41, 0x43, 0x4B, 0x81, 0x23]
exponential_data = [0x24, 0x80, 0x00, 0x81, 0x02, 0x03, 0x31, 0x3A, 0x34, 0x30, 0x2E, 0x30, 0x30, 0x7C, 0x32, 0x3A, 0x33, 0x34, 0x2E, 0x32, 0x38, 0x7C, 0x33, 0x3A, 0x32, 0x39, 0x2E, 0x33, 0x39, 0x7C, 0x34, 0x3A, 0x32, 0x35, 0x2E, 0x31, 0x39, 0x7C, 0x35, 0x3A, 0x32, 0x31, 0x2E, 0x36, 0x30, 0x7C, 0x36, 0x3A, 0x31, 0x38, 0x2E, 0x35, 0x31, 0x7C, 0x37, 0x3A, 0x31, 0x35, 0x2E, 0x38, 0x37, 0x7C, 0x38, 0x3A, 0x31, 0x33, 0x2E, 0x36, 0x30, 0x7C, 0x39, 0x3A, 0x31, 0x31, 0x2E, 0x36, 0x36, 0x7C, 0x31, 0x30, 0x3A, 0x31, 0x30, 0x2E, 0x30, 0x30, 0x7C, 0x81, 0x23]
exitAck = [0x24, 0x80, 0x00, 0x03, 0x10, 0x03, 0x41, 0x43, 0x4B, 0x81, 0x23]
startAck = [0x24, 0x80, 0x00, 0x03, 0x03, 0x13, 0x41, 0x43, 0x4B, 0x81, 0x23]
home_brew_off = [0x24, 0x80, 0x00, 0x07, 0x10, 0x02, 0x37, 0x32, 0x30, 0x7C, 0x4F, 0x46, 0x46, 0x81, 0x23]
input_test =[0x24, 0x80, 0x00, 0x13, 0x02, 0x06, 0x39, 0x3A, 0x31, 0x7C, 0x31, 0x30, 0x3A, 0x31, 0x7C, 0x31, 0x31, 0x3A, 0x31, 0x81, 0x23]
calibration_done = [0x24, 0x80, 0x00, 0x04, 0x04, 0x04, 0x44, 0x4f, 0x4E, 0x45, 0x81, 0x23]
heat_on = [0x24, 0x80, 0x00, 0x01, 0x02, 0x04, 0x31,  0x81, 0x23]
heat_off = [0x24, 0x80, 0x00, 0x01, 0x02, 0x05, 0x31,  0x81, 0x23]
steam_on = [0x24, 0x80, 0x00, 0x01, 0x02, 0x06, 0x31,  0x81, 0x23]
steam_off = [0x24, 0x80, 0x00, 0x01, 0x02, 0x07, 0x31,  0x81, 0x23]
error_data = [0x24, 0x80, 0x00, 0x05, 0x04, 0x01, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x81, 0x23]
warning_data = [0x24, 0x80, 0x00, 0x05, 0x06, 0x01, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x81, 0x23]
remove_warning_data = [0x24, 0x80, 0x00, 0x05, 0x06, 0x02, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x81, 0x23]


def convert():
    line = '248000140103496E697469616C697A6174696F6E8123'
    n = 2
    print(['0x'+line[i:i + n] for i in range(0, len(line), n)])

serialPort = serial.Serial(
    port="COM10", baudrate=115200, bytesize=8, timeout=2, stopbits=serial.STOPBITS_ONE
)

# serialPort.write(serial.to_bytes(ready))
# time.sleep(60)
# print('Sending warning ')
# serialPort.write(serial.to_bytes(warning_data))
# time.sleep(60)
# print('Sending warning clear')
# serialPort.write(serial.to_bytes(remove_warning_data))
# time.sleep(60)
# print('Sending Error ')
# serialPort.write(serial.to_bytes(error_data))


convert()


serialString = ""  # Used to hold data coming over UART
while 1:
    # Read data out of the buffer until a carraige return / new line is found
    serialString = serialPort.readline()
    print(serialString)
    # Print the contents of the serial data
    try:
        # received = serialString.decode("Ascii")
        # print(received)
        if(serialString.__eq__(b'')):
            pass
        elif(serialString.__contains__(b'\x10\x03')):
            print('Sending exit ACK')
            serialPort.write(serial.to_bytes(exitAck))
        elif (serialString.__contains__(b'\x03\x13')):
            print('Sending start ACK')
            serialPort.write(serial.to_bytes(startAck))

        elif(serialString.__contains__(b'HANDSHAKE')):
            print('Sending ACK')
            serialPort.write(serial.to_bytes(ack))
            time.sleep(3)
            print('Sending version')
            serialPort.write(serial.to_bytes(version))
            # time.sleep(3)
            # print('Sending initialization')
            # serialPort.write(serial.to_bytes(initialization_String))
            time.sleep(3)
            print('Sending ready')
            serialPort.write(serial.to_bytes(ready))
        elif (serialString.__contains__(b'|7:1')):
            print('Sending setting ack')
            serialPort.write(serial.to_bytes(setting_ack))
        elif (serialString.__contains__(b'MACHINE READY')):
            print('Sending machine ready ack')
            serialPort.write(serial.to_bytes(machineready_ack))
        elif (serialString.__contains__(b'\x05\x011')):
            print('Sending recepp ack')
            serialPort.write(serial.to_bytes(receipt_ack))
            time.sleep(3)
            print('Sending ready')
            serialPort.write(serial.to_bytes(ready))
            # time.sleep(3)
            # print('Sending current mm')
            # serialPort.write(serial.to_bytes(current_mm))
            # time.sleep(3)
            # print('Sending process complete')
            # serialPort.write(serial.to_bytes(process_complete))
        elif (serialString.__contains__(b'CANCEL')):
            print('Sending cancel ack')
            serialPort.write(serial.to_bytes(cancel_ack))
        elif (serialString.__contains__(b'RESET')):
            print('Sending RESET ack')
            serialPort.write(serial.to_bytes(reset_ack))
            time.sleep(3)
            print('Sending reset complete')
            serialPort.write(serial.to_bytes(reset_complete))
        elif (serialString.__contains__(b'\x02\x02')):
            print('Sending Exponential data ack')
            serialPort.write(serial.to_bytes(exponentaial_ack))
            time.sleep(3)
            print('Sending exponential data ')
            serialPort.write(serial.to_bytes(exponential_data))
            time.sleep(15)
            print('Sending current passage')
            serialPort.write(serial.to_bytes(current_passage))
        elif (serialString.__contains__(b'\x06\x10\x01720|ON')):
            time.sleep(3)
            print('Sending HomeBrew Off ')
            serialPort.write(serial.to_bytes(home_brew_off))
        elif (serialString.__contains__(b'\x02\x05E')):
            time.sleep(3)
            print('Sending input test Off ')
            serialPort.write(serial.to_bytes(input_test))
        elif (serialString.__contains__(b'\x04\x01S')):
            time.sleep(5)
            print('Sending calibration done ')
            serialPort.write(serial.to_bytes(calibration_done))
        elif (serialString.__contains__(b'START')):
            print('Sending heat on')
            serialPort.write(serial.to_bytes(heat_on))
            time.sleep(50)
            print('Sending heat off')
            serialPort.write(serial.to_bytes(heat_off))
            time.sleep(50)
            print('Sending steam on')
            serialPort.write(serial.to_bytes(steam_on))
            time.sleep(50)
            print('Sending steam off')
            serialPort.write(serial.to_bytes(steam_off))
            # print('Sending warning ')
            # serialPort.write(serial.to_bytes(warning_data))
            # time.sleep(30)
            # print('Sending warning clear')
            # serialPort.write(serial.to_bytes(remove_warning_data))
            # time.sleep(5)
            # print('Sending Error ')
            # serialPort.write(serial.to_bytes(error_data))
        




    except Exception as e:
        print(e)

        pass
